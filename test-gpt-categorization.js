#!/usr/bin/env node

/**
 * Script de prueba para categorizaci√≥n autom√°tica con GPT-5
 * 
 * Este script toma registros con categor√≠a "Pendiente" y los categoriza
 * usando OpenAI GPT-5 con razonamiento profundo basado en el contenido de la publicaci√≥n.
 */

const { PrismaClient } = require('./src/generated/prisma');

const prisma = new PrismaClient();

// Configuraci√≥n de OpenAI (necesitar√°s tu API key)
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_API_KEY) {
  console.error('‚ùå Error: OPENAI_API_KEY no est√° configurada en las variables de entorno');
  process.exit(1);
}

// Categor√≠as v√°lidas basadas en el sistema actual
const CATEGORIAS_VALIDAS = [
  'TRANSPARENCIA P√öBLICA',
  'SEGURIDAD', 
  'INVERTIR PARA CRECER',
  'N/A' // Para casos que no encajen en ninguna categor√≠a espec√≠fica
];

/**
 * Funci√≥n para generar el prompt espec√≠fico para cada publicaci√≥n
 */
function generarPrompt(perfil, contenido) {
  return `Act√∫a como un analista especializado en comunicaci√≥n gubernamental y an√°lisis de contenido digital. Tienes experiencia en categorizaci√≥n tem√°tica de publicaciones institucionales y an√°lisis cuantitativo-cualitativo de estrategias comunicacionales de entidades p√∫blicas.

Analiza de manera exhaustiva y sistem√°tica la base de datos de publicaciones de los perfiles de Facebook e Instagram de la ${perfil} clasificando cada publicaci√≥n seg√∫n los tres temas espec√≠ficos definidos: 

1. SEGURIDAD
Publicaciones que aborden temas de seguridad ciudadana, prevenci√≥n del delito, orden p√∫blico, convivencia pac√≠fica, programas de seguridad comunitaria, o cualquier iniciativa relacionada con la protecci√≥n y bienestar de los ciudadanos en materia de seguridad.

2. TRANSPARENCIA P√öBLICA
Publicaciones que cumplan con la obligaci√≥n gubernamental de rendir cuentas, incluyendo: informes de gesti√≥n, uso de recursos p√∫blicos, decisiones administrativas, procesos de contrataci√≥n, resultados de programas, datos abiertos, audiencias p√∫blicas, o cualquier contenido que busque mostrar informaci√≥n clara, oportuna y comprensible sobre las acciones y recursos de la entidad. Como Operaciones de cr√©dito y condiciones financieras, Plataforma "Pa' que Ve√°s" (que es el monitor de inversi√≥n p√∫blica), Cronogramas y ejecuci√≥n presupuestal de proyectos, Rendici√≥n de cuentas sobre avances de inversiones y Control social y herramientas de seguimiento ciudadano

3. INVERTIR PARA CRECER
Publicaciones relacionadas con la estrategia "Invertir para Crecer" del alcalde Alejandro Eder, que contempla una inversi√≥n total de $3,5 billones para 32 proyectos estructurales. Incluye cualquier menci√≥n de: recuperaci√≥n de territorios abandonados; tecnolog√≠a, bioeconom√≠a, movilidad sostenible; transformaci√≥n urbana, empleo, seguridad.
Proyectos con invertir para crecer:
Recuperaci√≥n de malla vial (800+ kil√≥metros, incluyendo Avenida Ciudad de Cali)
Subsidios de vivienda (6.300 subsidios)
Mejoras en colegios p√∫blicos (20 instituciones educativas)
Fortalecimiento de Plataforma Tecnol√≥gica de la Alcald√≠a
Recuperaci√≥n de bibliotecas y espacios culturales
Intervenci√≥n de escenarios deportivos y recreativos (63 espacios)
Fortalecimiento Casa Matria Juanamb√∫
Mantenimiento de CALIs (18 de 23 centros)
Programas de formaci√≥n en biling√ºismo y competencias laborales
Becas educativas para educaci√≥n superior

PROCESO DE AN√ÅLISIS REQUERIDO
PASO 1: Filtrado y Clasificaci√≥n
Clasifica cada publicaci√≥n en los tres temas definidos
Una publicaci√≥n puede pertenecer solo a uno de los temas definidos.
Identifica publicaciones que NO correspondan a ninguno de los tres temas y asigna la etiqueta N/A

Los temas deben llamarse tal cual como est√°n "SEGURIDAD", "TRANSPARENCIA P√öBLICA", "INVERTIR PARA CRECER"

Responde √öNICAMENTE con el nombre exacto de la categor√≠a (SEGURIDAD, TRANSPARENCIA P√öBLICA, INVERTIR PARA CRECER, o N/A), sin explicaciones adicionales.

Contenido de la publicaci√≥n a analizar:
${contenido}`;
}

/**
 * Funci√≥n para llamar a la API de OpenAI
 */
async function categorizarConGPT(perfil, contenido) {
  try {
    const prompt = generarPrompt(perfil, contenido);
    
    const response = await fetch('https://api.openai.com/v1/responses', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-5-chat-latest', // Usando el modelo GPT-5 como en tu ejemplo
        input: [
          {
            role: 'system',
            content: 'Eres un analista especializado en comunicaci√≥n gubernamental. Responde √öNICAMENTE con el nombre exacto de la categor√≠a (SEGURIDAD, TRANSPARENCIA P√öBLICA, INVERTIR PARA CRECER, o N/A), sin explicaciones adicionales.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2, // Baja temperatura para respuestas consistentes
        max_output_tokens: 50
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    // Debug: ver la estructura completa de la respuesta (solo en modo debug)
    // console.log('üîç DEBUG - Estructura de respuesta:', JSON.stringify(data, null, 2));
    
    // Estructura de respuesta de GPT-5 en /v1/responses
    let categoria;
    if (data.output && data.output[0] && data.output[0].content && data.output[0].content[0] && data.output[0].content[0].text) {
      categoria = data.output[0].content[0].text.trim();
    } else if (data.choices && data.choices[0] && data.choices[0].message) {
      // Fallback para estructura est√°ndar
      categoria = data.choices[0].message.content.trim();
    } else {
      console.warn('‚ö†Ô∏è  Estructura de respuesta desconocida:', data);
      return 'N/A';
    }
    
    // Validar que la categor√≠a sea una de las v√°lidas
    if (!CATEGORIAS_VALIDAS.includes(categoria)) {
      console.warn(`‚ö†Ô∏è  Categor√≠a no v√°lida recibida: "${categoria}". Usando "N/A"`);
      return 'N/A';
    }
    
    return categoria;
  } catch (error) {
    console.error('‚ùå Error al llamar a OpenAI:', error.message);
    return null;
  }
}

/**
 * Funci√≥n principal de prueba
 */
async function probarCategorizacion() {
  try {
    console.log('üöÄ Iniciando prueba de categorizaci√≥n con GPT...\n');
    
    // Obtener algunos registros pendientes para probar
    const registrosPendientes = await prisma.publicacion.findMany({
      where: {
        categoria: 'Pendiente',
        publicar: { not: null } // Solo los que tienen contenido
      },
      take: 5, // 5 registros para prueba completa
      select: {
        id: true,
        perfil: true,
        publicar: true,
        categoria: true
      }
    });

    console.log(`üìä Encontrados ${registrosPendientes.length} registros para probar\n`);

    for (let i = 0; i < registrosPendientes.length; i++) {
      const registro = registrosPendientes[i];
      
      console.log(`\n--- Registro ${i + 1}/${registrosPendientes.length} ---`);
      console.log(`üÜî ID: ${registro.id}`);
      console.log(`üë§ Perfil: ${registro.perfil}`);
      console.log(`üìù Contenido: ${registro.publicar?.substring(0, 100)}...`);
      console.log(`üìÇ Categor√≠a actual: ${registro.categoria}`);
      
      // Categorizar con GPT
      console.log('ü§ñ Categorizando con GPT...');
      const nuevaCategoria = await categorizarConGPT(registro.perfil, registro.publicar);
      
      if (nuevaCategoria) {
        console.log(`‚úÖ Nueva categor√≠a sugerida: ${nuevaCategoria}`);
        
        // En modo de prueba, NO actualizamos la base de datos
        console.log('‚ÑπÔ∏è  (Modo prueba - no se actualiza la BD)');
      } else {
        console.log('‚ùå Error en categorizaci√≥n');
      }
      
      // Pausa peque√±a para no saturar la API
      if (i < registrosPendientes.length - 1) {
        console.log('‚è≥ Esperando 2 segundos...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    console.log('\nüéâ Prueba completada!');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  probarCategorizacion();
}

module.exports = { categorizarConGPT, CATEGORIAS_VALIDAS };
